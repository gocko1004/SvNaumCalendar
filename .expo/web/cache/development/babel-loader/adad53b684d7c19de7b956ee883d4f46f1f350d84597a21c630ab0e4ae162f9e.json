{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState, useEffect } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nvar AUTH_TOKEN_KEY = '@auth_token';\nexport var useAuth = function useAuth() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isAuthenticated = _useState2[0],\n    setIsAuthenticated = _useState2[1];\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isLoading = _useState4[0],\n    setIsLoading = _useState4[1];\n  useEffect(function () {\n    checkAuthStatus();\n  }, []);\n  var checkAuthStatus = function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        var token = yield AsyncStorage.getItem(AUTH_TOKEN_KEY);\n        setIsAuthenticated(!!token);\n      } catch (error) {\n        console.error('Error checking auth status:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    });\n    return function checkAuthStatus() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var login = function () {\n    var _ref2 = _asyncToGenerator(function* (username, password) {\n      try {\n        if (username === 'admin' && password === 'password') {\n          var mockToken = 'mock-jwt-token';\n          yield AsyncStorage.setItem(AUTH_TOKEN_KEY, mockToken);\n          setIsAuthenticated(true);\n          return true;\n        }\n        throw new Error('Invalid credentials');\n      } catch (error) {\n        console.error('Login error:', error);\n        throw error;\n      }\n    });\n    return function login(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var logout = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      try {\n        yield AsyncStorage.removeItem(AUTH_TOKEN_KEY);\n        setIsAuthenticated(false);\n      } catch (error) {\n        console.error('Logout error:', error);\n      }\n    });\n    return function logout() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  return {\n    isAuthenticated: isAuthenticated,\n    isLoading: isLoading,\n    login: login,\n    logout: logout\n  };\n};","map":{"version":3,"names":["useState","useEffect","AsyncStorage","AUTH_TOKEN_KEY","useAuth","_useState","_useState2","_slicedToArray","isAuthenticated","setIsAuthenticated","_useState3","_useState4","isLoading","setIsLoading","checkAuthStatus","_ref","_asyncToGenerator","token","getItem","error","console","apply","arguments","login","_ref2","username","password","mockToken","setItem","Error","_x","_x2","logout","_ref3","removeItem"],"sources":["/Users/gocepetrov/Documents/Sv Naum Calendar/src/hooks/useAuth.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nconst AUTH_TOKEN_KEY = '@auth_token';\n\nexport const useAuth = () => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n\n  const checkAuthStatus = async () => {\n    try {\n      const token = await AsyncStorage.getItem(AUTH_TOKEN_KEY);\n      setIsAuthenticated(!!token);\n    } catch (error) {\n      console.error('Error checking auth status:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const login = async (username: string, password: string) => {\n    try {\n      // TODO: Replace with actual API call\n      if (username === 'admin' && password === 'password') {\n        const mockToken = 'mock-jwt-token';\n        await AsyncStorage.setItem(AUTH_TOKEN_KEY, mockToken);\n        setIsAuthenticated(true);\n        return true;\n      }\n      throw new Error('Invalid credentials');\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await AsyncStorage.removeItem(AUTH_TOKEN_KEY);\n      setIsAuthenticated(false);\n    } catch (error) {\n      console.error('Logout error:', error);\n    }\n  };\n\n  return {\n    isAuthenticated,\n    isLoading,\n    login,\n    logout,\n  };\n}; "],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,YAAY,MAAM,2CAA2C;AAEpE,IAAMC,cAAc,GAAG,aAAa;AAEpC,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAOA,CAAA,EAAS;EAC3B,IAAAC,SAAA,GAA8CL,QAAQ,CAAC,KAAK,CAAC;IAAAM,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAtDG,eAAe,GAAAF,UAAA;IAAEG,kBAAkB,GAAAH,UAAA;EAC1C,IAAAI,UAAA,GAAkCV,QAAQ,CAAC,IAAI,CAAC;IAAAW,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAzCE,SAAS,GAAAD,UAAA;IAAEE,YAAY,GAAAF,UAAA;EAE9BV,SAAS,CAAC,YAAM;IACda,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMA,eAAe;IAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;MAClC,IAAI;QACF,IAAMC,KAAK,SAASf,YAAY,CAACgB,OAAO,CAACf,cAAc,CAAC;QACxDM,kBAAkB,CAAC,CAAC,CAACQ,KAAK,CAAC;MAC7B,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD,CAAC,SAAS;QACRN,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAAA,gBATKC,eAAeA,CAAA;MAAA,OAAAC,IAAA,CAAAM,KAAA,OAAAC,SAAA;IAAA;EAAA,GASpB;EAED,IAAMC,KAAK;IAAA,IAAAC,KAAA,GAAAR,iBAAA,CAAG,WAAOS,QAAgB,EAAEC,QAAgB,EAAK;MAC1D,IAAI;QAEF,IAAID,QAAQ,KAAK,OAAO,IAAIC,QAAQ,KAAK,UAAU,EAAE;UACnD,IAAMC,SAAS,GAAG,gBAAgB;UAClC,MAAMzB,YAAY,CAAC0B,OAAO,CAACzB,cAAc,EAAEwB,SAAS,CAAC;UACrDlB,kBAAkB,CAAC,IAAI,CAAC;UACxB,OAAO,IAAI;QACb;QACA,MAAM,IAAIoB,KAAK,CAAC,qBAAqB,CAAC;MACxC,CAAC,CAAC,OAAOV,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;QACpC,MAAMA,KAAK;MACb;IACF,CAAC;IAAA,gBAdKI,KAAKA,CAAAO,EAAA,EAAAC,GAAA;MAAA,OAAAP,KAAA,CAAAH,KAAA,OAAAC,SAAA;IAAA;EAAA,GAcV;EAED,IAAMU,MAAM;IAAA,IAAAC,KAAA,GAAAjB,iBAAA,CAAG,aAAY;MACzB,IAAI;QACF,MAAMd,YAAY,CAACgC,UAAU,CAAC/B,cAAc,CAAC;QAC7CM,kBAAkB,CAAC,KAAK,CAAC;MAC3B,CAAC,CAAC,OAAOU,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACvC;IACF,CAAC;IAAA,gBAPKa,MAAMA,CAAA;MAAA,OAAAC,KAAA,CAAAZ,KAAA,OAAAC,SAAA;IAAA;EAAA,GAOX;EAED,OAAO;IACLd,eAAe,EAAfA,eAAe;IACfI,SAAS,EAATA,SAAS;IACTW,KAAK,EAALA,KAAK;IACLS,MAAM,EAANA;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}