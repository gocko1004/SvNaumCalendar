{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport * as Notifications from 'expo-notifications';\nimport * as Device from 'expo-device';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { addMinutes } from 'date-fns';\nimport { CHURCH_EVENTS_2025 } from \"./ChurchCalendarService\";\nNotifications.setNotificationHandler({\n  handleNotification: function () {\n    var _handleNotification = _asyncToGenerator(function* () {\n      return {\n        shouldShowAlert: true,\n        shouldPlaySound: true,\n        shouldSetBadge: true\n      };\n    });\n    function handleNotification() {\n      return _handleNotification.apply(this, arguments);\n    }\n    return handleNotification;\n  }()\n});\nvar NotificationService = _createClass(function NotificationService() {\n  var _this = this;\n  _classCallCheck(this, NotificationService);\n  this.configure = _asyncToGenerator(function* () {\n    if (Platform.OS === 'android') {\n      yield Notifications.setNotificationChannelAsync('church-events', {\n        name: 'Church Events',\n        description: 'Church calendar events and reminders',\n        importance: Notifications.AndroidImportance.MAX,\n        vibrationPattern: [0, 250, 250, 250],\n        lightColor: '#831B26'\n      });\n      yield Notifications.setNotificationChannelAsync('urgent-updates', {\n        name: 'Urgent Updates',\n        description: 'Important church updates and announcements',\n        importance: Notifications.AndroidImportance.MAX,\n        vibrationPattern: [0, 250, 250, 250],\n        lightColor: '#FF0000'\n      });\n    }\n    if (Device.isDevice) {\n      var _yield$Notifications$ = yield Notifications.getPermissionsAsync(),\n        existingStatus = _yield$Notifications$.status;\n      var finalStatus = existingStatus;\n      if (existingStatus !== 'granted') {\n        var _yield$Notifications$2 = yield Notifications.requestPermissionsAsync(),\n          status = _yield$Notifications$2.status;\n        finalStatus = status;\n      }\n      if (finalStatus !== 'granted') {\n        console.log('Failed to get push token for push notification!');\n        return;\n      }\n    }\n  });\n  this.scheduleNotification = function () {\n    var _ref2 = _asyncToGenerator(function* (reminder) {\n      var title = reminder.title,\n        message = reminder.message,\n        date = reminder.date,\n        identifier = reminder.identifier,\n        urgent = reminder.urgent;\n      yield Notifications.scheduleNotificationAsync({\n        content: {\n          title: title,\n          body: message,\n          sound: true,\n          priority: urgent ? Notifications.AndroidNotificationPriority.MAX : Notifications.AndroidNotificationPriority.DEFAULT\n        },\n        trigger: {\n          date: date,\n          channelId: urgent ? 'urgent-updates' : 'church-events'\n        },\n        identifier: identifier\n      });\n    });\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  this.sendCustomNotification = function () {\n    var _ref3 = _asyncToGenerator(function* (notification) {\n      var title = notification.title,\n        message = notification.message,\n        _notification$date = notification.date,\n        date = _notification$date === void 0 ? new Date() : _notification$date,\n        _notification$urgent = notification.urgent,\n        urgent = _notification$urgent === void 0 ? true : _notification$urgent;\n      yield _this.scheduleNotification({\n        title: title,\n        message: message,\n        date: date,\n        urgent: urgent,\n        identifier: `custom-${Date.now()}`\n      });\n    });\n    return function (_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  this.scheduleChurchEvent = function () {\n    var _ref4 = _asyncToGenerator(function* (event) {\n      var notifyBefore = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 60;\n      var _event$time$split$map = event.time.split(':').map(Number),\n        _event$time$split$map2 = _slicedToArray(_event$time$split$map, 2),\n        hours = _event$time$split$map2[0],\n        minutes = _event$time$split$map2[1];\n      var eventDate = new Date(event.date);\n      eventDate.setHours(hours, minutes);\n      var notificationTime = addMinutes(eventDate, -notifyBefore);\n      var identifier = `${event.date.getTime()}-${event.serviceType}-${notifyBefore}`;\n      var message = `${event.name} започнува за ${notifyBefore === 1440 ? '24 часа' : '1 час'}`;\n      if (event.serviceType === 'PICNIC' && event.description) {\n        message += `\\nЛокација: ${event.description}`;\n      }\n      yield _this.scheduleNotification({\n        title: event.name,\n        message: message,\n        date: notificationTime,\n        identifier: identifier,\n        urgent: event.serviceType === 'PICNIC'\n      });\n    });\n    return function (_x3) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  this.scheduleChurchEvents = _asyncToGenerator(function* () {\n    yield _this.cancelAllNotifications();\n    for (var event of CHURCH_EVENTS_2025) {\n      yield _this.scheduleChurchEvent(event, 1440);\n      yield _this.scheduleChurchEvent(event, 60);\n    }\n  });\n  this.cancelAllNotifications = _asyncToGenerator(function* () {\n    yield Notifications.cancelAllScheduledNotificationsAsync();\n  });\n  this.cancelNotification = function () {\n    var _ref7 = _asyncToGenerator(function* (identifier) {\n      yield Notifications.cancelScheduledNotificationAsync(identifier);\n    });\n    return function (_x4) {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n  this.configure();\n});\nexport default new NotificationService();","map":{"version":3,"names":["Notifications","Device","Platform","addMinutes","CHURCH_EVENTS_2025","setNotificationHandler","handleNotification","_handleNotification","_asyncToGenerator","shouldShowAlert","shouldPlaySound","shouldSetBadge","apply","arguments","NotificationService","_createClass","_this","_classCallCheck","configure","OS","setNotificationChannelAsync","name","description","importance","AndroidImportance","MAX","vibrationPattern","lightColor","isDevice","_yield$Notifications$","getPermissionsAsync","existingStatus","status","finalStatus","_yield$Notifications$2","requestPermissionsAsync","console","log","scheduleNotification","_ref2","reminder","title","message","date","identifier","urgent","scheduleNotificationAsync","content","body","sound","priority","AndroidNotificationPriority","DEFAULT","trigger","channelId","_x","sendCustomNotification","_ref3","notification","_notification$date","Date","_notification$urgent","now","_x2","scheduleChurchEvent","_ref4","event","notifyBefore","length","undefined","_event$time$split$map","time","split","map","Number","_event$time$split$map2","_slicedToArray","hours","minutes","eventDate","setHours","notificationTime","getTime","serviceType","_x3","scheduleChurchEvents","cancelAllNotifications","cancelAllScheduledNotificationsAsync","cancelNotification","_ref7","cancelScheduledNotificationAsync","_x4"],"sources":["/Users/gocepetrov/Documents/Sv Naum Calendar/src/services/NotificationService.ts"],"sourcesContent":["import * as Notifications from 'expo-notifications';\nimport * as Device from 'expo-device';\nimport { Platform } from 'react-native';\nimport { format, addMinutes } from 'date-fns';\nimport { ChurchEvent, CHURCH_EVENTS_2025 } from './ChurchCalendarService';\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: true,\n    shouldSetBadge: true,\n  }),\n});\n\nclass NotificationService {\n  constructor() {\n    this.configure();\n  }\n\n  configure = async () => {\n    if (Platform.OS === 'android') {\n      await Notifications.setNotificationChannelAsync('church-events', {\n        name: 'Church Events',\n        description: 'Church calendar events and reminders',\n        importance: Notifications.AndroidImportance.MAX,\n        vibrationPattern: [0, 250, 250, 250],\n        lightColor: '#831B26',\n      });\n\n      // Additional channel for urgent notifications\n      await Notifications.setNotificationChannelAsync('urgent-updates', {\n        name: 'Urgent Updates',\n        description: 'Important church updates and announcements',\n        importance: Notifications.AndroidImportance.MAX,\n        vibrationPattern: [0, 250, 250, 250],\n        lightColor: '#FF0000',\n      });\n    }\n\n    if (Device.isDevice) {\n      const { status: existingStatus } = await Notifications.getPermissionsAsync();\n      let finalStatus = existingStatus;\n      if (existingStatus !== 'granted') {\n        const { status } = await Notifications.requestPermissionsAsync();\n        finalStatus = status;\n      }\n      if (finalStatus !== 'granted') {\n        console.log('Failed to get push token for push notification!');\n        return;\n      }\n    }\n  };\n\n  scheduleNotification = async (reminder: {\n    title: string;\n    message: string;\n    date: Date;\n    identifier?: string;\n    urgent?: boolean;\n  }) => {\n    const { title, message, date, identifier, urgent } = reminder;\n\n    await Notifications.scheduleNotificationAsync({\n      content: {\n        title,\n        body: message,\n        sound: true,\n        priority: urgent ? Notifications.AndroidNotificationPriority.MAX : Notifications.AndroidNotificationPriority.DEFAULT,\n      },\n      trigger: {\n        date,\n        channelId: urgent ? 'urgent-updates' : 'church-events',\n      },\n      identifier,\n    });\n  };\n\n  sendCustomNotification = async (notification: {\n    title: string;\n    message: string;\n    date?: Date;\n    urgent?: boolean;\n  }) => {\n    const { title, message, date = new Date(), urgent = true } = notification;\n\n    await this.scheduleNotification({\n      title,\n      message,\n      date,\n      urgent,\n      identifier: `custom-${Date.now()}`,\n    });\n  };\n\n  scheduleChurchEvent = async (event: ChurchEvent, notifyBefore: number = 60) => {\n    const [hours, minutes] = event.time.split(':').map(Number);\n    const eventDate = new Date(event.date);\n    eventDate.setHours(hours, minutes);\n\n    const notificationTime = addMinutes(eventDate, -notifyBefore);\n    const identifier = `${event.date.getTime()}-${event.serviceType}-${notifyBefore}`;\n\n    let message = `${event.name} започнува за ${notifyBefore === 1440 ? '24 часа' : '1 час'}`;\n    \n    // Add location info for picnics and special events\n    if (event.serviceType === 'PICNIC' && event.description) {\n      message += `\\nЛокација: ${event.description}`;\n    }\n\n    await this.scheduleNotification({\n      title: event.name,\n      message,\n      date: notificationTime,\n      identifier,\n      urgent: event.serviceType === 'PICNIC',\n    });\n  };\n\n  scheduleChurchEvents = async () => {\n    // Cancel all existing notifications before scheduling new ones\n    await this.cancelAllNotifications();\n\n    // Schedule each event with both day-before and hour-before notifications\n    for (const event of CHURCH_EVENTS_2025) {\n      // 24-hour notification\n      await this.scheduleChurchEvent(event, 1440);\n      \n      // 1-hour notification\n      await this.scheduleChurchEvent(event, 60);\n    }\n  };\n\n  cancelAllNotifications = async () => {\n    await Notifications.cancelAllScheduledNotificationsAsync();\n  };\n\n  cancelNotification = async (identifier: string) => {\n    await Notifications.cancelScheduledNotificationAsync(identifier);\n  };\n}\n\nexport default new NotificationService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}