{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { TextInput, Button, Title, Snackbar } from 'react-native-paper';\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport { format } from 'date-fns';\nimport { useLanguage } from \"../contexts/LanguageContext\";\nimport { COLORS } from \"../constants/theme\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var EventFormScreen = function EventFormScreen() {\n  var _useLanguage = useLanguage(),\n    t = _useLanguage.t;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    title = _useState2[0],\n    setTitle = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    description = _useState4[0],\n    setDescription = _useState4[1];\n  var _useState5 = useState(new Date()),\n    _useState6 = _slicedToArray(_useState5, 2),\n    date = _useState6[0],\n    setDate = _useState6[1];\n  var _useState7 = useState(new Date()),\n    _useState8 = _slicedToArray(_useState7, 2),\n    time = _useState8[0],\n    setTime = _useState8[1];\n  var _useState9 = useState(''),\n    _useState10 = _slicedToArray(_useState9, 2),\n    location = _useState10[0],\n    setLocation = _useState10[1];\n  var _useState11 = useState(false),\n    _useState12 = _slicedToArray(_useState11, 2),\n    showDatePicker = _useState12[0],\n    setShowDatePicker = _useState12[1];\n  var _useState13 = useState(false),\n    _useState14 = _slicedToArray(_useState13, 2),\n    showTimePicker = _useState14[0],\n    setShowTimePicker = _useState14[1];\n  var _useState15 = useState(false),\n    _useState16 = _slicedToArray(_useState15, 2),\n    snackbarVisible = _useState16[0],\n    setSnackbarVisible = _useState16[1];\n  var _useState17 = useState(''),\n    _useState18 = _slicedToArray(_useState17, 2),\n    snackbarMessage = _useState18[0],\n    setSnackbarMessage = _useState18[1];\n  var onDateChange = function onDateChange(event, selectedDate) {\n    setShowDatePicker(false);\n    if (selectedDate) {\n      setDate(selectedDate);\n    }\n  };\n  var onTimeChange = function onTimeChange(event, selectedTime) {\n    setShowTimePicker(false);\n    if (selectedTime) {\n      setTime(selectedTime);\n    }\n  };\n  var handleSubmit = function () {\n    var _ref = _asyncToGenerator(function* () {\n      if (!title || !description) {\n        setSnackbarMessage('Пополнете ги сите полиња');\n        setSnackbarVisible(true);\n        return;\n      }\n      try {\n        setSnackbarMessage(t.eventSaved);\n        setSnackbarVisible(true);\n        setTitle('');\n        setDescription('');\n        setLocation('');\n        setDate(new Date());\n        setTime(new Date());\n      } catch (error) {\n        setSnackbarMessage('Грешка при зачувување на настанот');\n        setSnackbarVisible(true);\n      }\n    });\n    return function handleSubmit() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return _jsxs(ScrollView, {\n    style: styles.container,\n    children: [_jsx(Title, {\n      style: styles.title,\n      children: t.addEvent\n    }), _jsx(TextInput, {\n      label: t.eventTitle,\n      value: title,\n      onChangeText: setTitle,\n      style: styles.input\n    }), _jsx(TextInput, {\n      label: t.eventDescription,\n      value: description,\n      onChangeText: setDescription,\n      multiline: true,\n      numberOfLines: 4,\n      style: styles.input\n    }), _jsx(Button, {\n      mode: \"outlined\",\n      onPress: function onPress() {\n        return setShowDatePicker(true);\n      },\n      style: styles.input,\n      children: format(date, 'dd.MM.yyyy')\n    }), showDatePicker && _jsx(DateTimePicker, {\n      value: date,\n      mode: \"date\",\n      display: Platform.OS === 'ios' ? 'spinner' : 'default',\n      onChange: onDateChange\n    }), _jsx(Button, {\n      mode: \"outlined\",\n      onPress: function onPress() {\n        return setShowTimePicker(true);\n      },\n      style: styles.input,\n      children: format(time, 'HH:mm')\n    }), showTimePicker && _jsx(DateTimePicker, {\n      value: time,\n      mode: \"time\",\n      display: Platform.OS === 'ios' ? 'spinner' : 'default',\n      onChange: onTimeChange\n    }), _jsx(TextInput, {\n      label: t.eventLocation,\n      value: location,\n      onChangeText: setLocation,\n      style: styles.input\n    }), _jsx(Button, {\n      mode: \"contained\",\n      onPress: handleSubmit,\n      style: styles.submitButton,\n      children: t.saveEvent\n    }), _jsx(Snackbar, {\n      visible: snackbarVisible,\n      onDismiss: function onDismiss() {\n        return setSnackbarVisible(false);\n      },\n      duration: 3000,\n      children: snackbarMessage\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16,\n    backgroundColor: COLORS.BACKGROUND\n  },\n  title: {\n    marginBottom: 24,\n    textAlign: 'center',\n    color: COLORS.PRIMARY\n  },\n  input: {\n    marginBottom: 16\n  },\n  submitButton: {\n    marginTop: 8,\n    backgroundColor: COLORS.PRIMARY\n  }\n});","map":{"version":3,"names":["React","useState","StyleSheet","ScrollView","Platform","TextInput","Button","Title","Snackbar","DateTimePicker","format","useLanguage","COLORS","jsx","_jsx","jsxs","_jsxs","EventFormScreen","_useLanguage","t","_useState","_useState2","_slicedToArray","title","setTitle","_useState3","_useState4","description","setDescription","_useState5","Date","_useState6","date","setDate","_useState7","_useState8","time","setTime","_useState9","_useState10","location","setLocation","_useState11","_useState12","showDatePicker","setShowDatePicker","_useState13","_useState14","showTimePicker","setShowTimePicker","_useState15","_useState16","snackbarVisible","setSnackbarVisible","_useState17","_useState18","snackbarMessage","setSnackbarMessage","onDateChange","event","selectedDate","onTimeChange","selectedTime","handleSubmit","_ref","_asyncToGenerator","eventSaved","error","apply","arguments","style","styles","container","children","addEvent","label","eventTitle","value","onChangeText","input","eventDescription","multiline","numberOfLines","mode","onPress","display","OS","onChange","eventLocation","submitButton","saveEvent","visible","onDismiss","duration","create","flex","padding","backgroundColor","BACKGROUND","marginBottom","textAlign","color","PRIMARY","marginTop"],"sources":["/Users/gocepetrov/Documents/Sv Naum Calendar/src/screens/EventFormScreen.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { View, StyleSheet, ScrollView, Platform } from 'react-native';\nimport { TextInput, Button, Title, Snackbar } from 'react-native-paper';\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport { format } from 'date-fns';\nimport { useLanguage } from '../contexts/LanguageContext';\nimport { COLORS } from '../constants/theme';\n\nexport const EventFormScreen = () => {\n  const { t } = useLanguage();\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [date, setDate] = useState(new Date());\n  const [time, setTime] = useState(new Date());\n  const [location, setLocation] = useState('');\n  const [showDatePicker, setShowDatePicker] = useState(false);\n  const [showTimePicker, setShowTimePicker] = useState(false);\n  const [snackbarVisible, setSnackbarVisible] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState('');\n\n  const onDateChange = (event: any, selectedDate?: Date) => {\n    setShowDatePicker(false);\n    if (selectedDate) {\n      setDate(selectedDate);\n    }\n  };\n\n  const onTimeChange = (event: any, selectedTime?: Date) => {\n    setShowTimePicker(false);\n    if (selectedTime) {\n      setTime(selectedTime);\n    }\n  };\n\n  const handleSubmit = async () => {\n    if (!title || !description) {\n      setSnackbarMessage('Пополнете ги сите полиња');\n      setSnackbarVisible(true);\n      return;\n    }\n\n    try {\n      // TODO: Implement event saving logic\n      setSnackbarMessage(t.eventSaved);\n      setSnackbarVisible(true);\n      \n      // Reset form\n      setTitle('');\n      setDescription('');\n      setLocation('');\n      setDate(new Date());\n      setTime(new Date());\n    } catch (error) {\n      setSnackbarMessage('Грешка при зачувување на настанот');\n      setSnackbarVisible(true);\n    }\n  };\n\n  return (\n    <ScrollView style={styles.container}>\n      <Title style={styles.title}>{t.addEvent}</Title>\n\n      <TextInput\n        label={t.eventTitle}\n        value={title}\n        onChangeText={setTitle}\n        style={styles.input}\n      />\n\n      <TextInput\n        label={t.eventDescription}\n        value={description}\n        onChangeText={setDescription}\n        multiline\n        numberOfLines={4}\n        style={styles.input}\n      />\n\n      <Button\n        mode=\"outlined\"\n        onPress={() => setShowDatePicker(true)}\n        style={styles.input}\n      >\n        {format(date, 'dd.MM.yyyy')}\n      </Button>\n\n      {showDatePicker && (\n        <DateTimePicker\n          value={date}\n          mode=\"date\"\n          display={Platform.OS === 'ios' ? 'spinner' : 'default'}\n          onChange={onDateChange}\n        />\n      )}\n\n      <Button\n        mode=\"outlined\"\n        onPress={() => setShowTimePicker(true)}\n        style={styles.input}\n      >\n        {format(time, 'HH:mm')}\n      </Button>\n\n      {showTimePicker && (\n        <DateTimePicker\n          value={time}\n          mode=\"time\"\n          display={Platform.OS === 'ios' ? 'spinner' : 'default'}\n          onChange={onTimeChange}\n        />\n      )}\n\n      <TextInput\n        label={t.eventLocation}\n        value={location}\n        onChangeText={setLocation}\n        style={styles.input}\n      />\n\n      <Button\n        mode=\"contained\"\n        onPress={handleSubmit}\n        style={styles.submitButton}\n      >\n        {t.saveEvent}\n      </Button>\n\n      <Snackbar\n        visible={snackbarVisible}\n        onDismiss={() => setSnackbarVisible(false)}\n        duration={3000}\n      >\n        {snackbarMessage}\n      </Snackbar>\n    </ScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16,\n    backgroundColor: COLORS.BACKGROUND,\n  },\n  title: {\n    marginBottom: 24,\n    textAlign: 'center',\n    color: COLORS.PRIMARY,\n  },\n  input: {\n    marginBottom: 16,\n  },\n  submitButton: {\n    marginTop: 8,\n    backgroundColor: COLORS.PRIMARY,\n  },\n}); "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,UAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,QAAA;AAExC,SAASC,SAAS,EAAEC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,oBAAoB;AACvE,OAAOC,cAAc,MAAM,wCAAwC;AACnE,SAASC,MAAM,QAAQ,UAAU;AACjC,SAASC,WAAW;AACpB,SAASC,MAAM;AAA6B,SAAAC,GAAA,IAAAC,IAAA,EAAAC,IAAA,IAAAC,KAAA;AAE5C,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAeA,CAAA,EAAS;EACnC,IAAAC,YAAA,GAAcP,WAAW,CAAC,CAAC;IAAnBQ,CAAC,GAAAD,YAAA,CAADC,CAAC;EACT,IAAAC,SAAA,GAA0BnB,QAAQ,CAAC,EAAE,CAAC;IAAAoB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA/BG,KAAK,GAAAF,UAAA;IAAEG,QAAQ,GAAAH,UAAA;EACtB,IAAAI,UAAA,GAAsCxB,QAAQ,CAAC,EAAE,CAAC;IAAAyB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAA3CE,WAAW,GAAAD,UAAA;IAAEE,cAAc,GAAAF,UAAA;EAClC,IAAAG,UAAA,GAAwB5B,QAAQ,CAAC,IAAI6B,IAAI,CAAC,CAAC,CAAC;IAAAC,UAAA,GAAAT,cAAA,CAAAO,UAAA;IAArCG,IAAI,GAAAD,UAAA;IAAEE,OAAO,GAAAF,UAAA;EACpB,IAAAG,UAAA,GAAwBjC,QAAQ,CAAC,IAAI6B,IAAI,CAAC,CAAC,CAAC;IAAAK,UAAA,GAAAb,cAAA,CAAAY,UAAA;IAArCE,IAAI,GAAAD,UAAA;IAAEE,OAAO,GAAAF,UAAA;EACpB,IAAAG,UAAA,GAAgCrC,QAAQ,CAAC,EAAE,CAAC;IAAAsC,WAAA,GAAAjB,cAAA,CAAAgB,UAAA;IAArCE,QAAQ,GAAAD,WAAA;IAAEE,WAAW,GAAAF,WAAA;EAC5B,IAAAG,WAAA,GAA4CzC,QAAQ,CAAC,KAAK,CAAC;IAAA0C,WAAA,GAAArB,cAAA,CAAAoB,WAAA;IAApDE,cAAc,GAAAD,WAAA;IAAEE,iBAAiB,GAAAF,WAAA;EACxC,IAAAG,WAAA,GAA4C7C,QAAQ,CAAC,KAAK,CAAC;IAAA8C,WAAA,GAAAzB,cAAA,CAAAwB,WAAA;IAApDE,cAAc,GAAAD,WAAA;IAAEE,iBAAiB,GAAAF,WAAA;EACxC,IAAAG,WAAA,GAA8CjD,QAAQ,CAAC,KAAK,CAAC;IAAAkD,WAAA,GAAA7B,cAAA,CAAA4B,WAAA;IAAtDE,eAAe,GAAAD,WAAA;IAAEE,kBAAkB,GAAAF,WAAA;EAC1C,IAAAG,WAAA,GAA8CrD,QAAQ,CAAC,EAAE,CAAC;IAAAsD,WAAA,GAAAjC,cAAA,CAAAgC,WAAA;IAAnDE,eAAe,GAAAD,WAAA;IAAEE,kBAAkB,GAAAF,WAAA;EAE1C,IAAMG,YAAY,GAAG,SAAfA,YAAYA,CAAIC,KAAU,EAAEC,YAAmB,EAAK;IACxDf,iBAAiB,CAAC,KAAK,CAAC;IACxB,IAAIe,YAAY,EAAE;MAChB3B,OAAO,CAAC2B,YAAY,CAAC;IACvB;EACF,CAAC;EAED,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAIF,KAAU,EAAEG,YAAmB,EAAK;IACxDb,iBAAiB,CAAC,KAAK,CAAC;IACxB,IAAIa,YAAY,EAAE;MAChBzB,OAAO,CAACyB,YAAY,CAAC;IACvB;EACF,CAAC;EAED,IAAMC,YAAY;IAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;MAC/B,IAAI,CAAC1C,KAAK,IAAI,CAACI,WAAW,EAAE;QAC1B8B,kBAAkB,CAAC,0BAA0B,CAAC;QAC9CJ,kBAAkB,CAAC,IAAI,CAAC;QACxB;MACF;MAEA,IAAI;QAEFI,kBAAkB,CAACtC,CAAC,CAAC+C,UAAU,CAAC;QAChCb,kBAAkB,CAAC,IAAI,CAAC;QAGxB7B,QAAQ,CAAC,EAAE,CAAC;QACZI,cAAc,CAAC,EAAE,CAAC;QAClBa,WAAW,CAAC,EAAE,CAAC;QACfR,OAAO,CAAC,IAAIH,IAAI,CAAC,CAAC,CAAC;QACnBO,OAAO,CAAC,IAAIP,IAAI,CAAC,CAAC,CAAC;MACrB,CAAC,CAAC,OAAOqC,KAAK,EAAE;QACdV,kBAAkB,CAAC,mCAAmC,CAAC;QACvDJ,kBAAkB,CAAC,IAAI,CAAC;MAC1B;IACF,CAAC;IAAA,gBAtBKU,YAAYA,CAAA;MAAA,OAAAC,IAAA,CAAAI,KAAA,OAAAC,SAAA;IAAA;EAAA,GAsBjB;EAED,OACErD,KAAA,CAACb,UAAU;IAACmE,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,GAClC3D,IAAA,CAACP,KAAK;MAAC+D,KAAK,EAAEC,MAAM,CAAChD,KAAM;MAAAkD,QAAA,EAAEtD,CAAC,CAACuD;IAAQ,CAAQ,CAAC,EAEhD5D,IAAA,CAACT,SAAS;MACRsE,KAAK,EAAExD,CAAC,CAACyD,UAAW;MACpBC,KAAK,EAAEtD,KAAM;MACbuD,YAAY,EAAEtD,QAAS;MACvB8C,KAAK,EAAEC,MAAM,CAACQ;IAAM,CACrB,CAAC,EAEFjE,IAAA,CAACT,SAAS;MACRsE,KAAK,EAAExD,CAAC,CAAC6D,gBAAiB;MAC1BH,KAAK,EAAElD,WAAY;MACnBmD,YAAY,EAAElD,cAAe;MAC7BqD,SAAS;MACTC,aAAa,EAAE,CAAE;MACjBZ,KAAK,EAAEC,MAAM,CAACQ;IAAM,CACrB,CAAC,EAEFjE,IAAA,CAACR,MAAM;MACL6E,IAAI,EAAC,UAAU;MACfC,OAAO,EAAE,SAATA,OAAOA,CAAA;QAAA,OAAQvC,iBAAiB,CAAC,IAAI,CAAC;MAAA,CAAC;MACvCyB,KAAK,EAAEC,MAAM,CAACQ,KAAM;MAAAN,QAAA,EAEnB/D,MAAM,CAACsB,IAAI,EAAE,YAAY;IAAC,CACrB,CAAC,EAERY,cAAc,IACb9B,IAAA,CAACL,cAAc;MACboE,KAAK,EAAE7C,IAAK;MACZmD,IAAI,EAAC,MAAM;MACXE,OAAO,EAAEjF,QAAQ,CAACkF,EAAE,KAAK,KAAK,GAAG,SAAS,GAAG,SAAU;MACvDC,QAAQ,EAAE7B;IAAa,CACxB,CACF,EAED5C,IAAA,CAACR,MAAM;MACL6E,IAAI,EAAC,UAAU;MACfC,OAAO,EAAE,SAATA,OAAOA,CAAA;QAAA,OAAQnC,iBAAiB,CAAC,IAAI,CAAC;MAAA,CAAC;MACvCqB,KAAK,EAAEC,MAAM,CAACQ,KAAM;MAAAN,QAAA,EAEnB/D,MAAM,CAAC0B,IAAI,EAAE,OAAO;IAAC,CAChB,CAAC,EAERY,cAAc,IACblC,IAAA,CAACL,cAAc;MACboE,KAAK,EAAEzC,IAAK;MACZ+C,IAAI,EAAC,MAAM;MACXE,OAAO,EAAEjF,QAAQ,CAACkF,EAAE,KAAK,KAAK,GAAG,SAAS,GAAG,SAAU;MACvDC,QAAQ,EAAE1B;IAAa,CACxB,CACF,EAED/C,IAAA,CAACT,SAAS;MACRsE,KAAK,EAAExD,CAAC,CAACqE,aAAc;MACvBX,KAAK,EAAErC,QAAS;MAChBsC,YAAY,EAAErC,WAAY;MAC1B6B,KAAK,EAAEC,MAAM,CAACQ;IAAM,CACrB,CAAC,EAEFjE,IAAA,CAACR,MAAM;MACL6E,IAAI,EAAC,WAAW;MAChBC,OAAO,EAAErB,YAAa;MACtBO,KAAK,EAAEC,MAAM,CAACkB,YAAa;MAAAhB,QAAA,EAE1BtD,CAAC,CAACuE;IAAS,CACN,CAAC,EAET5E,IAAA,CAACN,QAAQ;MACPmF,OAAO,EAAEvC,eAAgB;MACzBwC,SAAS,EAAE,SAAXA,SAASA,CAAA;QAAA,OAAQvC,kBAAkB,CAAC,KAAK,CAAC;MAAA,CAAC;MAC3CwC,QAAQ,EAAE,IAAK;MAAApB,QAAA,EAEdjB;IAAe,CACR,CAAC;EAAA,CACD,CAAC;AAEjB,CAAC;AAED,IAAMe,MAAM,GAAGrE,UAAU,CAAC4F,MAAM,CAAC;EAC/BtB,SAAS,EAAE;IACTuB,IAAI,EAAE,CAAC;IACPC,OAAO,EAAE,EAAE;IACXC,eAAe,EAAErF,MAAM,CAACsF;EAC1B,CAAC;EACD3E,KAAK,EAAE;IACL4E,YAAY,EAAE,EAAE;IAChBC,SAAS,EAAE,QAAQ;IACnBC,KAAK,EAAEzF,MAAM,CAAC0F;EAChB,CAAC;EACDvB,KAAK,EAAE;IACLoB,YAAY,EAAE;EAChB,CAAC;EACDV,YAAY,EAAE;IACZc,SAAS,EAAE,CAAC;IACZN,eAAe,EAAErF,MAAM,CAAC0F;EAC1B;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}